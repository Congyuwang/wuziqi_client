// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes

import 'dart:convert';
import 'dart:typed_data';
import 'package:freezed_annotation/freezed_annotation.dart';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class Native {
  /// domain_port should include port
  Stream<Responses> connectToServer({required String domainPort, dynamic hint});

  /// use this function to send messages to server
  /// this function does nothing if the connection is not yet established
  Future<void> send({required Messages msg, dynamic hint});

  /// for flutter debug use only
  Future<Field> emptyField({dynamic hint});

  /// for flutter debug use only.
  /// 0 for empty, 1 for black, 2 for white
  /// ! do not use this in production
  Future<Field> constructFieldWithLatest(
      {required int latestX,
      required int latestY,
      required Uint8List seeds,
      dynamic hint});

  Future<SessionConfig> defaultSessionConfig({dynamic hint});

  Future<SessionConfig> setUndoRequestTimeout(
      {required SessionConfig config, required int secs, dynamic hint});

  Future<SessionConfig> setUndoDialogueExtraSeconds(
      {required SessionConfig config, required int secs, dynamic hint});

  Future<SessionConfig> setPlayTimeout(
      {required SessionConfig config, required int secs, dynamic hint});
}

enum Color {
  Black,
  White,
}

enum ConnectionError {
  /// Attempting to send or receive over-sized data payload
  MaxDataLengthExceeded,

  /// Cannot decode message type
  UnknownMessageType,

  /// checksum incorrect
  DataCorrupted,

  /// `TryFrom<&[u8]>` returned error
  DecodeError,

  /// Cannot decode error message
  UnknownError,
}

@freezed
class ConnectionInitError with _$ConnectionInitError {
  const factory ConnectionInitError.ipMaxConnExceed() = IpMaxConnExceed;
  const factory ConnectionInitError.connectionClosed() = ConnectionClosed;
  const factory ConnectionInitError.userNameNotReceived() = UserNameNotReceived;
  const factory ConnectionInitError.userNameTooLong() = UserNameTooLong;
  const factory ConnectionInitError.userNameExists() = UserNameExists;
  const factory ConnectionInitError.invalidUserName() = InvalidUserName;
  const factory ConnectionInitError.tlsError() = TlsError;
  const factory ConnectionInitError.networkError(
    ConnectionError field0,
  ) = NetworkError;
}

class Field {
  final int? latestX;
  final int? latestY;
  final List<FieldRow> rows;

  Field({
    this.latestX,
    this.latestY,
    required this.rows,
  });
}

class FieldRow {
  final List<SingleState> columns;

  FieldRow({
    required this.columns,
  });
}

@freezed
class Messages with _$Messages {
  /// login to the server
  const factory Messages.login({
    required String name,
    required String password,
  }) = Login;

  /// update account
  const factory Messages.updateAccount({
    required String name,
    required String oldPassword,
    required String newPassword,
  }) = UpdateAccount;

  /// create a new account
  const factory Messages.createAccount({
    required String name,
    required String password,
  }) = CreateAccount;

  /// send bytes to player
  const factory Messages.toPlayer({
    required String name,
    required Uint8List msg,
  }) = ToPlayer;

  /// search online players name
  /// will return `PlayerList` with player names
  /// that contains the required `name`
  /// if `name` is null, random player names are returned
  const factory Messages.searchOnlinePlayers({
    String? name,
    required int limit,
  }) = SearchOnlinePlayers;

  /// create a new room
  const factory Messages.createRoom(
    SessionConfig field0,
  ) = CreateRoom;

  /// attempt to join a room with a RoomToken
  const factory Messages.joinRoom(
    RoomToken field0,
  ) = JoinRoom;

  /// Quit a room
  const factory Messages.quitRoom() = QuitRoom;

  /// when in a Room, get ready for a game session
  const factory Messages.ready() = Ready;

  /// reverse `ready`
  const factory Messages.unready() = Unready;

  /// play a position in game [0, 15). Out of bounds are ignored.
  /// Repeatedly playing on an occupied position will result in `GameError`.
  const factory Messages.play({
    required int x,
    required int y,
  }) = Play;

  /// request undo in game.
  const factory Messages.requestUndo() = RequestUndo;

  /// approve undo requests in game.
  const factory Messages.approveUndo() = ApproveUndo;

  /// reject undo requests in game.
  const factory Messages.rejectUndo() = RejectUndo;

  /// quit game session (only quit this round).
  const factory Messages.quitGameSession() = QuitGameSession;

  /// chat message
  const factory Messages.sendChatMessage(
    String field0,
  ) = SendChatMessage;

  /// exit game (quit game and room), close connection
  /// exiting game without sending `ExitGame` signal is considered `Disconnected`
  const factory Messages.exitGame() = ExitGame;

  /// client error: other errors excluding network error
  const factory Messages.clientError(
    String field0,
  ) = ClientError;
}

@freezed
class Responses with _$Responses {
  const factory Responses.fromPlayer({
    required String name,
    required Uint8List msg,
  }) = FromPlayer;
  const factory Responses.playerList(
    List<String> field0,
  ) = PlayerList;

  /// Connection Init Error
  const factory Responses.connectionInitFailure(
    ConnectionInitError field0,
  ) = ConnectionInitFailure;

  /// response to `CreateRoom`
  const factory Responses.roomCreated(
    String field0,
  ) = RoomCreated;

  /// response to `JoinRoom`
  /// the two fields are correspondingly
  /// `room` token
  const factory Responses.joinRoomSuccess({
    required String token,
    required RoomState roomState,
  }) = JoinRoomSuccess;

  /// response to `JoinRoom`
  const factory Responses.joinRoomFailureTokenNotFound() =
      JoinRoomFailureTokenNotFound;

  /// response to `JoinRoom`
  const factory Responses.joinRoomFailureRoomFull() = JoinRoomFailureRoomFull;

  /// when the other player gets `JoinRoomSuccess`
  /// the `String` is the username
  const factory Responses.opponentJoinRoom(
    String field0,
  ) = OpponentJoinRoom;

  /// when the other player `QuitRoom`
  const factory Responses.opponentQuitRoom() = OpponentQuitRoom;

  /// when the other player is `Ready`
  const factory Responses.opponentReady() = OpponentReady;

  /// when the other play does `Unready`
  const factory Responses.opponentUnready() = OpponentUnready;

  /// when both players are `Ready`
  const factory Responses.gameStarted(
    Color field0,
  ) = GameStarted;

  /// update field
  const factory Responses.fieldUpdate(
    Field field0,
  ) = FieldUpdate;

  /// opponent request undo
  const factory Responses.undoRequest() = UndoRequest;

  /// undo rejected by timeout
  const factory Responses.undoTimeoutRejected() = UndoTimeoutRejected;

  /// undo rejected due to synchronization reason
  const factory Responses.undoAutoRejected() = UndoAutoRejected;

  /// undo approved
  const factory Responses.undo(
    Field field0,
  ) = Undo;

  /// undo rejected by opponent
  const factory Responses.undoRejectedByOpponent() = UndoRejectedByOpponent;

  /// game session ends, black timeout
  const factory Responses.gameEndBlackTimeout() = GameEndBlackTimeout;

  /// game session ends, white timeout
  const factory Responses.gameEndWhiteTimeout() = GameEndWhiteTimeout;

  /// game session ends, black wins
  const factory Responses.gameEndBlackWins() = GameEndBlackWins;

  /// game session ends, white wins
  const factory Responses.gameEndWhiteWins() = GameEndWhiteWins;

  /// game session ends, draw
  const factory Responses.gameEndDraw() = GameEndDraw;

  /// Room score information (player1, player2)
  const factory Responses.roomScores({
    required String player1Name,
    required int player1Score,
    required String player2Name,
    required int player2Score,
  }) = RoomScores;

  /// opponent quit game session
  const factory Responses.opponentQuitGameSession() = OpponentQuitGameSession;

  /// opponent exit game
  const factory Responses.opponentExitGame() = OpponentExitGame;

  /// opponent disconnected
  const factory Responses.opponentDisconnected() = OpponentDisconnected;

  /// game session ends in error
  const factory Responses.gameSessionError(
    String field0,
  ) = GameSessionError;

  /// ChatMessage: (user_name, message)
  const factory Responses.chatMessage({
    required String name,
    required String msg,
  }) = ChatMessage;

  /// create account failed (reason)
  const factory Responses.createAccountFailure(
    String field0,
  ) = CreateAccountFailure;

  /// login failed (reason)
  const factory Responses.loginFailure(
    String field0,
  ) = LoginFailure;

  /// update account failed (reason)
  const factory Responses.updateAccountFailure(
    String field0,
  ) = UpdateAccountFailure;

  /// create account success
  const factory Responses.createAccountSuccess({
    required String name,
    required String password,
  }) = CreateAccountSuccess;

  /// update account success
  const factory Responses.updateAccountSuccess({
    required String name,
    required String password,
  }) = UpdateAccountSuccess;

  /// login success (name)
  const factory Responses.loginSuccess(
    String field0,
  ) = LoginSuccess;

  /// I quit room
  const factory Responses.quitRoomSuccess() = QuitRoomSuccess;

  /// I quit game session
  const factory Responses.quitGameSessionSuccess() = QuitGameSessionSuccess;
}

@freezed
class RoomState with _$RoomState {
  const factory RoomState.empty() = Empty;
  const factory RoomState.opponentIsReady(
    String field0,
  ) = OpponentIsReady;
  const factory RoomState.opponentIsNotReady(
    String field0,
  ) = OpponentIsNotReady;
}

class RoomToken {
  final String field0;

  RoomToken({
    required this.field0,
  });
}

class SessionConfig {
  final int undoRequestTimeout;
  final int undoDialogueExtraSeconds;
  final int playTimeout;

  SessionConfig({
    required this.undoRequestTimeout,
    required this.undoDialogueExtraSeconds,
    required this.playTimeout,
  });
}

enum SingleState {
  /// black
  B,

  /// white
  W,

  /// empty
  E,
}

class NativeImpl extends FlutterRustBridgeBase<NativeWire> implements Native {
  factory NativeImpl(ffi.DynamicLibrary dylib) =>
      NativeImpl.raw(NativeWire(dylib));

  NativeImpl.raw(NativeWire inner) : super(inner);

  Stream<Responses> connectToServer(
          {required String domainPort, dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_connect_to_server(port_, _api2wire_String(domainPort)),
        parseSuccessData: _wire2api_responses,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "connect_to_server",
          argNames: ["domainPort"],
        ),
        argValues: [domainPort],
        hint: hint,
      ));

  Future<void> send({required Messages msg, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_send(port_, _api2wire_box_autoadd_messages(msg)),
        parseSuccessData: _wire2api_unit,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "send",
          argNames: ["msg"],
        ),
        argValues: [msg],
        hint: hint,
      ));

  Future<Field> emptyField({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_empty_field(port_),
        parseSuccessData: _wire2api_field,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "empty_field",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<Field> constructFieldWithLatest(
          {required int latestX,
          required int latestY,
          required Uint8List seeds,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_construct_field_with_latest(
            port_,
            _api2wire_i32(latestX),
            _api2wire_i32(latestY),
            _api2wire_uint_8_list(seeds)),
        parseSuccessData: _wire2api_field,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "construct_field_with_latest",
          argNames: ["latestX", "latestY", "seeds"],
        ),
        argValues: [latestX, latestY, seeds],
        hint: hint,
      ));

  Future<SessionConfig> defaultSessionConfig({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_default_session_config(port_),
        parseSuccessData: _wire2api_session_config,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "default_session_config",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<SessionConfig> setUndoRequestTimeout(
          {required SessionConfig config, required int secs, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_undo_request_timeout(port_,
            _api2wire_box_autoadd_session_config(config), _api2wire_u64(secs)),
        parseSuccessData: _wire2api_session_config,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_undo_request_timeout",
          argNames: ["config", "secs"],
        ),
        argValues: [config, secs],
        hint: hint,
      ));

  Future<SessionConfig> setUndoDialogueExtraSeconds(
          {required SessionConfig config, required int secs, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_undo_dialogue_extra_seconds(port_,
            _api2wire_box_autoadd_session_config(config), _api2wire_u64(secs)),
        parseSuccessData: _wire2api_session_config,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_undo_dialogue_extra_seconds",
          argNames: ["config", "secs"],
        ),
        argValues: [config, secs],
        hint: hint,
      ));

  Future<SessionConfig> setPlayTimeout(
          {required SessionConfig config, required int secs, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_set_play_timeout(port_,
            _api2wire_box_autoadd_session_config(config), _api2wire_u64(secs)),
        parseSuccessData: _wire2api_session_config,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_play_timeout",
          argNames: ["config", "secs"],
        ),
        argValues: [config, secs],
        hint: hint,
      ));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  ffi.Pointer<wire_Messages> _api2wire_box_autoadd_messages(Messages raw) {
    final ptr = inner.new_box_autoadd_messages();
    _api_fill_to_wire_messages(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_RoomToken> _api2wire_box_autoadd_room_token(RoomToken raw) {
    final ptr = inner.new_box_autoadd_room_token();
    _api_fill_to_wire_room_token(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_SessionConfig> _api2wire_box_autoadd_session_config(
      SessionConfig raw) {
    final ptr = inner.new_box_autoadd_session_config();
    _api_fill_to_wire_session_config(raw, ptr.ref);
    return ptr;
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : _api2wire_String(raw);
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_messages(
      Messages apiObj, ffi.Pointer<wire_Messages> wireObj) {
    _api_fill_to_wire_messages(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_room_token(
      RoomToken apiObj, ffi.Pointer<wire_RoomToken> wireObj) {
    _api_fill_to_wire_room_token(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_session_config(
      SessionConfig apiObj, ffi.Pointer<wire_SessionConfig> wireObj) {
    _api_fill_to_wire_session_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_messages(Messages apiObj, wire_Messages wireObj) {
    if (apiObj is Login) {
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_Messages_Login();
      wireObj.kind.ref.Login.ref.name = _api2wire_String(apiObj.name);
      wireObj.kind.ref.Login.ref.password = _api2wire_String(apiObj.password);
    }
    if (apiObj is UpdateAccount) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_Messages_UpdateAccount();
      wireObj.kind.ref.UpdateAccount.ref.name = _api2wire_String(apiObj.name);
      wireObj.kind.ref.UpdateAccount.ref.old_password =
          _api2wire_String(apiObj.oldPassword);
      wireObj.kind.ref.UpdateAccount.ref.new_password =
          _api2wire_String(apiObj.newPassword);
    }
    if (apiObj is CreateAccount) {
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_Messages_CreateAccount();
      wireObj.kind.ref.CreateAccount.ref.name = _api2wire_String(apiObj.name);
      wireObj.kind.ref.CreateAccount.ref.password =
          _api2wire_String(apiObj.password);
    }
    if (apiObj is ToPlayer) {
      wireObj.tag = 3;
      wireObj.kind = inner.inflate_Messages_ToPlayer();
      wireObj.kind.ref.ToPlayer.ref.name = _api2wire_String(apiObj.name);
      wireObj.kind.ref.ToPlayer.ref.msg = _api2wire_uint_8_list(apiObj.msg);
    }
    if (apiObj is SearchOnlinePlayers) {
      wireObj.tag = 4;
      wireObj.kind = inner.inflate_Messages_SearchOnlinePlayers();
      wireObj.kind.ref.SearchOnlinePlayers.ref.name =
          _api2wire_opt_String(apiObj.name);
      wireObj.kind.ref.SearchOnlinePlayers.ref.limit =
          _api2wire_u8(apiObj.limit);
    }
    if (apiObj is CreateRoom) {
      wireObj.tag = 5;
      wireObj.kind = inner.inflate_Messages_CreateRoom();
      wireObj.kind.ref.CreateRoom.ref.field0 =
          _api2wire_box_autoadd_session_config(apiObj.field0);
    }
    if (apiObj is JoinRoom) {
      wireObj.tag = 6;
      wireObj.kind = inner.inflate_Messages_JoinRoom();
      wireObj.kind.ref.JoinRoom.ref.field0 =
          _api2wire_box_autoadd_room_token(apiObj.field0);
    }
    if (apiObj is QuitRoom) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is Ready) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is Unready) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is Play) {
      wireObj.tag = 10;
      wireObj.kind = inner.inflate_Messages_Play();
      wireObj.kind.ref.Play.ref.x = _api2wire_u8(apiObj.x);
      wireObj.kind.ref.Play.ref.y = _api2wire_u8(apiObj.y);
    }
    if (apiObj is RequestUndo) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is ApproveUndo) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is RejectUndo) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is QuitGameSession) {
      wireObj.tag = 14;
      return;
    }
    if (apiObj is SendChatMessage) {
      wireObj.tag = 15;
      wireObj.kind = inner.inflate_Messages_SendChatMessage();
      wireObj.kind.ref.SendChatMessage.ref.field0 =
          _api2wire_String(apiObj.field0);
    }
    if (apiObj is ExitGame) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is ClientError) {
      wireObj.tag = 17;
      wireObj.kind = inner.inflate_Messages_ClientError();
      wireObj.kind.ref.ClientError.ref.field0 = _api2wire_String(apiObj.field0);
    }
  }

  void _api_fill_to_wire_room_token(RoomToken apiObj, wire_RoomToken wireObj) {
    wireObj.field0 = _api2wire_String(apiObj.field0);
  }

  void _api_fill_to_wire_session_config(
      SessionConfig apiObj, wire_SessionConfig wireObj) {
    wireObj.undo_request_timeout = _api2wire_u64(apiObj.undoRequestTimeout);
    wireObj.undo_dialogue_extra_seconds =
        _api2wire_u64(apiObj.undoDialogueExtraSeconds);
    wireObj.play_timeout = _api2wire_u64(apiObj.playTimeout);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

List<String> _wire2api_StringList(dynamic raw) {
  return (raw as List<dynamic>).cast<String>();
}

ConnectionInitError _wire2api_box_autoadd_connection_init_error(dynamic raw) {
  return _wire2api_connection_init_error(raw);
}

Field _wire2api_box_autoadd_field(dynamic raw) {
  return _wire2api_field(raw);
}

int _wire2api_box_autoadd_i32(dynamic raw) {
  return raw as int;
}

RoomState _wire2api_box_autoadd_room_state(dynamic raw) {
  return _wire2api_room_state(raw);
}

Color _wire2api_color(dynamic raw) {
  return Color.values[raw];
}

ConnectionError _wire2api_connection_error(dynamic raw) {
  return ConnectionError.values[raw];
}

ConnectionInitError _wire2api_connection_init_error(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return IpMaxConnExceed();
    case 1:
      return ConnectionClosed();
    case 2:
      return UserNameNotReceived();
    case 3:
      return UserNameTooLong();
    case 4:
      return UserNameExists();
    case 5:
      return InvalidUserName();
    case 6:
      return TlsError();
    case 7:
      return NetworkError(
        _wire2api_connection_error(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

Field _wire2api_field(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return Field(
    latestX: _wire2api_opt_box_autoadd_i32(arr[0]),
    latestY: _wire2api_opt_box_autoadd_i32(arr[1]),
    rows: _wire2api_list_field_row(arr[2]),
  );
}

FieldRow _wire2api_field_row(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 1)
    throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
  return FieldRow(
    columns: _wire2api_list_single_state(arr[0]),
  );
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

List<FieldRow> _wire2api_list_field_row(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_field_row).toList();
}

List<SingleState> _wire2api_list_single_state(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_single_state).toList();
}

int? _wire2api_opt_box_autoadd_i32(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_i32(raw);
}

Responses _wire2api_responses(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return FromPlayer(
        name: _wire2api_String(raw[1]),
        msg: _wire2api_uint_8_list(raw[2]),
      );
    case 1:
      return PlayerList(
        _wire2api_StringList(raw[1]),
      );
    case 2:
      return ConnectionInitFailure(
        _wire2api_box_autoadd_connection_init_error(raw[1]),
      );
    case 3:
      return RoomCreated(
        _wire2api_String(raw[1]),
      );
    case 4:
      return JoinRoomSuccess(
        token: _wire2api_String(raw[1]),
        roomState: _wire2api_box_autoadd_room_state(raw[2]),
      );
    case 5:
      return JoinRoomFailureTokenNotFound();
    case 6:
      return JoinRoomFailureRoomFull();
    case 7:
      return OpponentJoinRoom(
        _wire2api_String(raw[1]),
      );
    case 8:
      return OpponentQuitRoom();
    case 9:
      return OpponentReady();
    case 10:
      return OpponentUnready();
    case 11:
      return GameStarted(
        _wire2api_color(raw[1]),
      );
    case 12:
      return FieldUpdate(
        _wire2api_box_autoadd_field(raw[1]),
      );
    case 13:
      return UndoRequest();
    case 14:
      return UndoTimeoutRejected();
    case 15:
      return UndoAutoRejected();
    case 16:
      return Undo(
        _wire2api_box_autoadd_field(raw[1]),
      );
    case 17:
      return UndoRejectedByOpponent();
    case 18:
      return GameEndBlackTimeout();
    case 19:
      return GameEndWhiteTimeout();
    case 20:
      return GameEndBlackWins();
    case 21:
      return GameEndWhiteWins();
    case 22:
      return GameEndDraw();
    case 23:
      return RoomScores(
        player1Name: _wire2api_String(raw[1]),
        player1Score: _wire2api_i32(raw[2]),
        player2Name: _wire2api_String(raw[3]),
        player2Score: _wire2api_i32(raw[4]),
      );
    case 24:
      return OpponentQuitGameSession();
    case 25:
      return OpponentExitGame();
    case 26:
      return OpponentDisconnected();
    case 27:
      return GameSessionError(
        _wire2api_String(raw[1]),
      );
    case 28:
      return ChatMessage(
        name: _wire2api_String(raw[1]),
        msg: _wire2api_String(raw[2]),
      );
    case 29:
      return CreateAccountFailure(
        _wire2api_String(raw[1]),
      );
    case 30:
      return LoginFailure(
        _wire2api_String(raw[1]),
      );
    case 31:
      return UpdateAccountFailure(
        _wire2api_String(raw[1]),
      );
    case 32:
      return CreateAccountSuccess(
        name: _wire2api_String(raw[1]),
        password: _wire2api_String(raw[2]),
      );
    case 33:
      return UpdateAccountSuccess(
        name: _wire2api_String(raw[1]),
        password: _wire2api_String(raw[2]),
      );
    case 34:
      return LoginSuccess(
        _wire2api_String(raw[1]),
      );
    case 35:
      return QuitRoomSuccess();
    case 36:
      return QuitGameSessionSuccess();
    default:
      throw Exception("unreachable");
  }
}

RoomState _wire2api_room_state(dynamic raw) {
  switch (raw[0]) {
    case 0:
      return Empty();
    case 1:
      return OpponentIsReady(
        _wire2api_String(raw[1]),
      );
    case 2:
      return OpponentIsNotReady(
        _wire2api_String(raw[1]),
      );
    default:
      throw Exception("unreachable");
  }
}

SessionConfig _wire2api_session_config(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return SessionConfig(
    undoRequestTimeout: _wire2api_u64(arr[0]),
    undoDialogueExtraSeconds: _wire2api_u64(arr[1]),
    playTimeout: _wire2api_u64(arr[2]),
  );
}

SingleState _wire2api_single_state(dynamic raw) {
  return SingleState.values[raw];
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_connect_to_server(
    int port_,
    ffi.Pointer<wire_uint_8_list> domain_port,
  ) {
    return _wire_connect_to_server(
      port_,
      domain_port,
    );
  }

  late final _wire_connect_to_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_connect_to_server');
  late final _wire_connect_to_server = _wire_connect_to_serverPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_send(
    int port_,
    ffi.Pointer<wire_Messages> msg,
  ) {
    return _wire_send(
      port_,
      msg,
    );
  }

  late final _wire_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_Messages>)>>('wire_send');
  late final _wire_send = _wire_sendPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Messages>)>();

  void wire_empty_field(
    int port_,
  ) {
    return _wire_empty_field(
      port_,
    );
  }

  late final _wire_empty_fieldPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_empty_field');
  late final _wire_empty_field =
      _wire_empty_fieldPtr.asFunction<void Function(int)>();

  void wire_construct_field_with_latest(
    int port_,
    int latest_x,
    int latest_y,
    ffi.Pointer<wire_uint_8_list> seeds,
  ) {
    return _wire_construct_field_with_latest(
      port_,
      latest_x,
      latest_y,
      seeds,
    );
  }

  late final _wire_construct_field_with_latestPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Int32,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_construct_field_with_latest');
  late final _wire_construct_field_with_latest =
      _wire_construct_field_with_latestPtr.asFunction<
          void Function(int, int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_default_session_config(
    int port_,
  ) {
    return _wire_default_session_config(
      port_,
    );
  }

  late final _wire_default_session_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_default_session_config');
  late final _wire_default_session_config =
      _wire_default_session_configPtr.asFunction<void Function(int)>();

  void wire_set_undo_request_timeout(
    int port_,
    ffi.Pointer<wire_SessionConfig> config,
    int secs,
  ) {
    return _wire_set_undo_request_timeout(
      port_,
      config,
      secs,
    );
  }

  late final _wire_set_undo_request_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SessionConfig>,
              ffi.Uint64)>>('wire_set_undo_request_timeout');
  late final _wire_set_undo_request_timeout = _wire_set_undo_request_timeoutPtr
      .asFunction<void Function(int, ffi.Pointer<wire_SessionConfig>, int)>();

  void wire_set_undo_dialogue_extra_seconds(
    int port_,
    ffi.Pointer<wire_SessionConfig> config,
    int secs,
  ) {
    return _wire_set_undo_dialogue_extra_seconds(
      port_,
      config,
      secs,
    );
  }

  late final _wire_set_undo_dialogue_extra_secondsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SessionConfig>,
              ffi.Uint64)>>('wire_set_undo_dialogue_extra_seconds');
  late final _wire_set_undo_dialogue_extra_seconds =
      _wire_set_undo_dialogue_extra_secondsPtr.asFunction<
          void Function(int, ffi.Pointer<wire_SessionConfig>, int)>();

  void wire_set_play_timeout(
    int port_,
    ffi.Pointer<wire_SessionConfig> config,
    int secs,
  ) {
    return _wire_set_play_timeout(
      port_,
      config,
      secs,
    );
  }

  late final _wire_set_play_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_SessionConfig>,
              ffi.Uint64)>>('wire_set_play_timeout');
  late final _wire_set_play_timeout = _wire_set_play_timeoutPtr
      .asFunction<void Function(int, ffi.Pointer<wire_SessionConfig>, int)>();

  ffi.Pointer<wire_Messages> new_box_autoadd_messages() {
    return _new_box_autoadd_messages();
  }

  late final _new_box_autoadd_messagesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Messages> Function()>>(
          'new_box_autoadd_messages');
  late final _new_box_autoadd_messages = _new_box_autoadd_messagesPtr
      .asFunction<ffi.Pointer<wire_Messages> Function()>();

  ffi.Pointer<wire_RoomToken> new_box_autoadd_room_token() {
    return _new_box_autoadd_room_token();
  }

  late final _new_box_autoadd_room_tokenPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_RoomToken> Function()>>(
          'new_box_autoadd_room_token');
  late final _new_box_autoadd_room_token = _new_box_autoadd_room_tokenPtr
      .asFunction<ffi.Pointer<wire_RoomToken> Function()>();

  ffi.Pointer<wire_SessionConfig> new_box_autoadd_session_config() {
    return _new_box_autoadd_session_config();
  }

  late final _new_box_autoadd_session_configPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_SessionConfig> Function()>>(
          'new_box_autoadd_session_config');
  late final _new_box_autoadd_session_config =
      _new_box_autoadd_session_configPtr
          .asFunction<ffi.Pointer<wire_SessionConfig> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<MessagesKind> inflate_Messages_Login() {
    return _inflate_Messages_Login();
  }

  late final _inflate_Messages_LoginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_Login');
  late final _inflate_Messages_Login = _inflate_Messages_LoginPtr
      .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_UpdateAccount() {
    return _inflate_Messages_UpdateAccount();
  }

  late final _inflate_Messages_UpdateAccountPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_UpdateAccount');
  late final _inflate_Messages_UpdateAccount =
      _inflate_Messages_UpdateAccountPtr
          .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_CreateAccount() {
    return _inflate_Messages_CreateAccount();
  }

  late final _inflate_Messages_CreateAccountPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_CreateAccount');
  late final _inflate_Messages_CreateAccount =
      _inflate_Messages_CreateAccountPtr
          .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_ToPlayer() {
    return _inflate_Messages_ToPlayer();
  }

  late final _inflate_Messages_ToPlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_ToPlayer');
  late final _inflate_Messages_ToPlayer = _inflate_Messages_ToPlayerPtr
      .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_SearchOnlinePlayers() {
    return _inflate_Messages_SearchOnlinePlayers();
  }

  late final _inflate_Messages_SearchOnlinePlayersPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_SearchOnlinePlayers');
  late final _inflate_Messages_SearchOnlinePlayers =
      _inflate_Messages_SearchOnlinePlayersPtr
          .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_CreateRoom() {
    return _inflate_Messages_CreateRoom();
  }

  late final _inflate_Messages_CreateRoomPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_CreateRoom');
  late final _inflate_Messages_CreateRoom = _inflate_Messages_CreateRoomPtr
      .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_JoinRoom() {
    return _inflate_Messages_JoinRoom();
  }

  late final _inflate_Messages_JoinRoomPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_JoinRoom');
  late final _inflate_Messages_JoinRoom = _inflate_Messages_JoinRoomPtr
      .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_Play() {
    return _inflate_Messages_Play();
  }

  late final _inflate_Messages_PlayPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_Play');
  late final _inflate_Messages_Play = _inflate_Messages_PlayPtr
      .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_SendChatMessage() {
    return _inflate_Messages_SendChatMessage();
  }

  late final _inflate_Messages_SendChatMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_SendChatMessage');
  late final _inflate_Messages_SendChatMessage =
      _inflate_Messages_SendChatMessagePtr
          .asFunction<ffi.Pointer<MessagesKind> Function()>();

  ffi.Pointer<MessagesKind> inflate_Messages_ClientError() {
    return _inflate_Messages_ClientError();
  }

  late final _inflate_Messages_ClientErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MessagesKind> Function()>>(
          'inflate_Messages_ClientError');
  late final _inflate_Messages_ClientError = _inflate_Messages_ClientErrorPtr
      .asFunction<ffi.Pointer<MessagesKind> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class Messages_Login extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> password;
}

class Messages_UpdateAccount extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> old_password;

  external ffi.Pointer<wire_uint_8_list> new_password;
}

class Messages_CreateAccount extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> password;
}

class Messages_ToPlayer extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  external ffi.Pointer<wire_uint_8_list> msg;
}

class Messages_SearchOnlinePlayers extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> name;

  @ffi.Uint8()
  external int limit;
}

class wire_SessionConfig extends ffi.Struct {
  @ffi.Uint64()
  external int undo_request_timeout;

  @ffi.Uint64()
  external int undo_dialogue_extra_seconds;

  @ffi.Uint64()
  external int play_timeout;
}

class Messages_CreateRoom extends ffi.Struct {
  external ffi.Pointer<wire_SessionConfig> field0;
}

class wire_RoomToken extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class Messages_JoinRoom extends ffi.Struct {
  external ffi.Pointer<wire_RoomToken> field0;
}

class Messages_QuitRoom extends ffi.Opaque {}

class Messages_Ready extends ffi.Opaque {}

class Messages_Unready extends ffi.Opaque {}

class Messages_Play extends ffi.Struct {
  @ffi.Uint8()
  external int x;

  @ffi.Uint8()
  external int y;
}

class Messages_RequestUndo extends ffi.Opaque {}

class Messages_ApproveUndo extends ffi.Opaque {}

class Messages_RejectUndo extends ffi.Opaque {}

class Messages_QuitGameSession extends ffi.Opaque {}

class Messages_SendChatMessage extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class Messages_ExitGame extends ffi.Opaque {}

class Messages_ClientError extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class MessagesKind extends ffi.Union {
  external ffi.Pointer<Messages_Login> Login;

  external ffi.Pointer<Messages_UpdateAccount> UpdateAccount;

  external ffi.Pointer<Messages_CreateAccount> CreateAccount;

  external ffi.Pointer<Messages_ToPlayer> ToPlayer;

  external ffi.Pointer<Messages_SearchOnlinePlayers> SearchOnlinePlayers;

  external ffi.Pointer<Messages_CreateRoom> CreateRoom;

  external ffi.Pointer<Messages_JoinRoom> JoinRoom;

  external ffi.Pointer<Messages_QuitRoom> QuitRoom;

  external ffi.Pointer<Messages_Ready> Ready;

  external ffi.Pointer<Messages_Unready> Unready;

  external ffi.Pointer<Messages_Play> Play;

  external ffi.Pointer<Messages_RequestUndo> RequestUndo;

  external ffi.Pointer<Messages_ApproveUndo> ApproveUndo;

  external ffi.Pointer<Messages_RejectUndo> RejectUndo;

  external ffi.Pointer<Messages_QuitGameSession> QuitGameSession;

  external ffi.Pointer<Messages_SendChatMessage> SendChatMessage;

  external ffi.Pointer<Messages_ExitGame> ExitGame;

  external ffi.Pointer<Messages_ClientError> ClientError;
}

class wire_Messages extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<MessagesKind> kind;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
